generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  emailVerified   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  profile         UserProfile?
  decisions       Decision[]
  refreshTokens   RefreshToken[]

  @@index([email])
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([token])
  @@index([userId])
}

// User Profile
model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Demographics
  age               Int?
  city              String?
  state             String?
  country           String?
  zipCode           String?
  maritalStatus     String?
  dependents        Int      @default(0)

  // Career
  currentRole       String?
  industry          String?
  company           String?
  yearsExperience   Int?
  salary            Float?

  // Financial (stored as JSON for flexibility)
  financialData     Json     @default("{}")

  // Preferences
  preferences       Json     @default("{}")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

// Decision Models
model Decision {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String           // career_change, job_offer, etc.
  title             String
  description       String?
  status            String           @default("draft")

  parameters        Json             @default("{}")
  constraints       Json             @default("[]")

  decisionDeadline  DateTime?
  implementedAt     DateTime?

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  options           DecisionOption[]
  simulations       Simulation[]

  @@index([userId])
  @@index([status])
  @@index([type])
}

model DecisionOption {
  id              String       @id @default(cuid())
  decisionId      String
  decision        Decision     @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  title           String
  description     String?

  parameters      Json         @default("{}")
  pros            String[]
  cons            String[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  simulations     Simulation[]

  @@index([decisionId])
}

// Simulation Models
model Simulation {
  id              String          @id @default(cuid())
  decisionId      String
  decision        Decision        @relation(fields: [decisionId], references: [id], onDelete: Cascade)
  optionId        String
  option          DecisionOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)

  status          String          @default("pending") // pending, processing, completed, failed

  // Results stored as JSON for flexibility
  results         Json?
  aggregateMetrics Json?
  scenarios       Json?
  recommendations Json?
  risks           Json?
  opportunities   Json?

  processingTime  Int?            // milliseconds
  errorMessage    String?

  createdAt       DateTime        @default(now())
  completedAt     DateTime?

  @@index([decisionId])
  @@index([optionId])
  @@index([status])
  @@index([createdAt])
}

// Market Data Cache
model MarketDataCache {
  id              String   @id @default(cuid())
  type            String   // salary, cost_of_living, etc.
  key             String   // unique identifier for the data
  data            Json
  expiresAt       DateTime
  createdAt       DateTime @default(now())

  @@unique([type, key])
  @@index([expiresAt])
}